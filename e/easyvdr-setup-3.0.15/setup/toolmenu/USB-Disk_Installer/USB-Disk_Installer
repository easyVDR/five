#!/bin/bash
#
#
# Automatisierte Integration
# von USB-Massenspeicher
# v3    15.01.12 Captain_Beefheart
# v4    18.02.12 (de)aktivieren des Ubuntu automounters C.B. 
# v4.1  11.07.12 lot of fixes C.B. 
################################################

########### defines ###########################


. /usr/lib/vdr/easyvdr-config-loader                   ## common defines
. /usr/lib/vdr/functions/easyvdr-functions-lib         ## common functions
. /usr/share/easyvdr/setup/easyvdr-setup-defines       ## setup only defines
. /usr/share/easyvdr/setup/easyvdr-setup-functions     ## setup only functions


UDEV_FILE="/etc/udev/rules.d/42-easy_usb.rules"

AUTOFS_FLD="/var/autofs"
A_R_MASTER="/etc/auto.master"
A_R_FILE_DIR="/etc/autousb"
A_R_FILE_PRE="$A_R_FILE_DIR""/auto."
AUTOFS_SETUP_STATE="$EASYVDR_LOGDIR/autofs-setup.state"

KILLER="$SETUP/toolmenu/USB-Disk_Installer/reset_auto_files"

BACKTITLE=" USB-Installer "

M_OPTION="-fstype=auto,rw,noatime,sync"
DEV_PATH="/dev"

HELP1="$SETUP/toolmenu/USB-Disk_Installer/usb_ident_help"
HELP2="$SETUP/toolmenu/USB-Disk_Installer/usb_links_help"
HELP3="$SETUP/toolmenu/USB-Disk_Installer/usb_hdd_help"

MARK1="### USB-installer tmp-file ###"
MARK2="### made by autoinstaller ###"
MARK3="### status file for USB-autoinstaller - DO NOT EDIT! ###"
MARK4="Installierte Partition:"

########### functions part1 ###########################

Intro()
{
SEL_MODE="Switch_UBUNTU"
while [[ $SEL_MODE == "Switch_UBUNTU" ]] 
  do
    SEL_MODE=$(dialog \
        --colors\
        --backtitle "$BACKTITLE"\
        --title " Auswahl"\
        --cancel-label " Abbruch "\
        --menu "\n\
                         xxxxxxxxxxxxxxxxx\n\
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\
 \Z4\ZbUSB integrieren\Zn - neues USB-Geraet erkennen und integrieren.\n\
 \Z4\ZbPart. verwalten\Zn - Partitonen einbinden, Mointpoints definieren usw..\n\
 \Z4\Zb Switch_UBUNTU \Zn - der Ubuntu Automounter verhindert \"auto-umount\".\n\n\
 Bei \"USB integrieren\" wird anschliessend auch \"Verwalten\" augerufen.\n\
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n \n"\
          $DIA_BOX_SIZE\
          USB-integrieren      "neue HW hinzufuegen."   \
          Part.verwalten       "bereits integrierte HW bearbeiten/entfernen "   \
          Switch_UBUNTU        "(De)Aktivieren des Ubuntu-Automounters" \
          3>&1 1>&2 2>&3)
    OK_CANCEL=$?
    clear

    (($OK_CANCEL != 0)) && SEL_MODE="Abbruch"
    [[ $SEL_MODE == "Switch_UBUNTU" ]] && Switch_UBU_Installer
    (($OK_CANCEL != 0)) && break
done
}

#####
Switch_UBU_Installer()
{
. /etc/usbmount/usbmount.conf

if (( $ENABLED == 1 ))
  then
    AKTION_TXT="UBU_abschalten"; MESS_TXT="aktiviert"
  else
    AKTION_TXT="UBU_Aktivieren"; MESS_TXT="inaktiviert"
fi

dialog --backtitle "$BACKTITLE"\
       --colors\
       --title " Aktivieren/Deaktivieren des Ubuntu Automounters " \
       --yes-label " $AKTION_TXT "   \
       --no-label " abbrechen "         \
       --yesno "\n\n\
                         xxxxxxxxxxxxxxxxx\n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\
          Der USB-Automounter von Ubuntu ist zur Zeit \Z4\Zb$MESS_TXT\Zn.\n\
    Die hier gewaehlte Einstellung wird nach dem naechsten Neustart  \n\
                      in das System uebernommen.\n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" $DIA_BOX2_SIZE
         YES_NO=$?
clear

if (($YES_NO == 0)); then 
  (($ENABLED == 0)) && ENABLED=1 || ENABLED=0 
  sed -i -e "s|^\(ENABLED\)=.*|\1=$ENABLED|;" /etc/usbmount/usbmount.conf
fi 
}

#####
Start_And_Check()
{
dialog --backtitle "$BACKTITLE"\
       --colors\
       --title " USB-Speicher identifizieren "\
       --yes-label " start "\
       --no-label " abbrechen "\
       --yesno "\n\n\
                           xxxxxxxxxxxxxx \n\n\
               xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\
                 Bitte \Z4\Zb< start >\Zn waehlen und innerhalb \n\
                           von \Z1\Zb30\Zn Sekunden \n\
                     den USB-Speicher einstoepseln! \n\
               xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" $DIA_BOX2_SIZE
YES_NO=$?
clear

if ((  $YES_NO == 0 ))
  then
    Run_Check
    SAC_STAT=$?
  else 
    SAC_STAT=1
fi
return $SAC_STAT
}

#####
Run_Check()
{
Chk_HDD

SIZE_OF_LOG=$(wc -l tmpusb.log1 | cut -d" " -f1)
MESSAGE_LINE=$(cat tmpusb.log1 | grep -n -e "$MARK1" | cut -d: -f1) 

cutting_number=$(( ($SIZE_OF_LOG - $MESSAGE_LINE  + 1) ))
tail -n $cutting_number tmpusb.log1 >> tmpusb.log2

KENNUNG=$( cat tmpusb.log2 | grep -e "$HDD_MESSAGE" | cut -d:  -f8 | cut -d[ -f2 | cut -d] -f1 )
erw_KENNUNG=$KENNUNG":"
PARTIT_LINE=$( grep $erw_KENNUNG tmpusb.log2 )   
NO_ENTRIES=$(echo $PARTIT_LINE |  cut -d:  -f5 | wc -w )

rm -f tmpusb.log?

PARTI_COUNT=0
FOUND_UUIDs=""
FOUND_PARTI_STR=""
for ((i=0;i<$NO_ENTRIES;i++)) 
  do 
    j=$(($i +1))
    if [[ -e  /dev/$KENNUNG$j ]]
      then
        FOUND_UUID=$(blkid -o udev -p /dev/$KENNUNG$j | grep ID_FS_UUID= | cut -d= -f2)
        FOUND_TYPE=$(blkid -o udev -p /dev/$KENNUNG$j | grep ID_FS_TYPE= | cut -d= -f2)
      else
        FOUND_UUID="<empty>"
    fi

    if [[ $FOUND_UUID != "<empty>" ]]; then
      if [[ $FOUND_TYPE != "swap"  ]]; then  
        FOUND_UUIDs[$PARTI_COUNT]="$FOUND_UUID"
        FOUND_PARTI_STR="$FOUND_PARTI_STR $KENNUNG$j($FOUND_TYPE)"
        ((++PARTI_COUNT))
      fi
    fi
  done

if [[ -n ${FOUND_UUIDs[@]} ]]
  then
    INFO_TEXT="\n\n\n        gefundene Partitionen:\n $FOUND_PARTI_STR."
    MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
    sleep 5; clear
    F_STAT=0
  else 
    F_STAT=11
fi
return $F_STAT
}

#####################
Chk_HDD()
{
LOG_MESS="/var/log/syslog"
SHORTLOG="tmpusb.log1"
HDD_MESSAGE="-byte logical blocks:"
[ -f $SHORTLOG ] && rm $SHORTLOG

tail -f -n 1 $LOG_MESS >> $SHORTLOG &
  PID_OF_TAIL=$!
  disown $PID_OF_TAIL

DATUM=$(date)
echo "$MARK1  $DATUM" >> $SHORTLOG

S_LOG_STAT=0; BREAK_COUNTER=0
while (( $S_LOG_STAT == 0  )) && (( $BREAK_COUNTER < 100 ))   # default 100*0,3 = 30 Sekunden 
  do
    sleep 0.3
    S_LOG_STAT=$( grep -c -e "$HDD_MESSAGE" $SHORTLOG )
    ((++BREAK_COUNTER))
  done
sleep 1
kill $PID_OF_TAIL
}

#####
Set_Hw_Name()
{
HW_NAME_STAT=1
while (( $HW_NAME_STAT == 1 ))
  do
    H_W_Name_Menu
    if (( $OK_CANCEL == 0 ))
      then 
        Add_2_Auto_Master
        HW_NAME_STAT=$?
        if (( $HW_NAME_STAT == 0 ))
          then
            SET_HW_STAT=0
          else
            INFO_TEXT="\n\n\n        Name schon vergeben."
            MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
            sleep 5; clear
        fi
      else 
        SET_HW_STAT=1
        HW_NAME_STAT=0
    fi
  done
return $SET_HW_STAT
}

####
H_W_Name_Menu()
{
MISSING_INPUT=0
while (( $MISSING_INPUT == 0 ))
  do
    HELP_PRESSED="true"
    while [[ $HELP_PRESSED == "true" ]]
      do
        REC_HW_IDENT=$(dialog \
            --backtitle "$BACKTITLE"\
            --extra-button\
            --extra-label " Hilfe "\
            --title " HW-Identifier "\
            --inputbox "\n\n\
      Bitte geben Sie eine Kennzeichnung fuer Ihr USB-Geraet an. \n\
      Z.B. 32_TB_Togilech_Stick ( keine Leerzeichen oder sowas ) \n \n " \
            $DIA_BOX2_SIZE "32_TB_Togilech_Stick" 3>&1 1>&2 2>&3 3>&- )
        OK_CANCEL=$?
        clear

        GOT_NAME=$REC_HW_IDENT
        case $OK_CANCEL in
           0) Check_Missing;    HELP_PRESSED="false" ;;
           1)                   HELP_PRESSED="false"; MISSING_INPUT=1  ;;
           3) Show_Help $HELP1; HELP_PRESSED="true"  ;;
        esac
      done
  done
}

#####
Make_Udev() 
{
j=0
for dummy in ${FOUND_UUIDs[@]}
do
  ALREADY_IN=$( grep $dummy $UDEV_FILE  )
  if [[ ! -n $ALREADY_IN ]]
    then
      Generate_Name
      Write_Rule
      SYM_LINK_ARRAY[$j]=$SYM_LINK
      STAT=0
    else 
      INFO_TEXT="\n\n\n        Partition bereits integriert."
      MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
      sleep 5; clear
      SYM_LINK_ARRAY[$j]="x_empty_x"
      STAT=1 
  fi
  ((++j)) 
done
return $STAT
}

#####
Generate_Name()
{
SYM_LINK_PRE="auto_easy_"
i=1
NAME_EXIST="dummy_init"
while [[ -n $NAME_EXIST ]]
  do
    SYM_LINK=$SYM_LINK_PRE$i
    NAME_EXIST=$( grep $SYM_LINK $UDEV_FILE )
    ((++i))
  done
}

#####
Write_Rule()
{
echo                                                                  >> $UDEV_FILE
echo  "############### $SYM_LINK #################################"   >> $UDEV_FILE
echo  "KERNEL!=\"sd[a-z][0-9]\",    GOTO=\"Exit fuer $SYM_LINK\""     >> $UDEV_FILE
echo  "# Import FS infos"                                             >> $UDEV_FILE
echo  "IMPORT{program}=\"/sbin/blkid -o udev -p %N\""                 >> $UDEV_FILE
echo  "#### teste uuid"                                               >> $UDEV_FILE
echo  "ENV{ID_FS_UUID}!=\"$dummy\", GOTO=\"Exit fuer $SYM_LINK\""     >> $UDEV_FILE
echo  "MODE=\"0666\", SYMLINK+=\"$SYM_LINK\""                         >> $UDEV_FILE
echo  "#### Exit ####"                                                >> $UDEV_FILE
echo  "LABEL=\"Exit fuer $SYM_LINK\""                                 >> $UDEV_FILE
echo  "############### $SYM_LINK Ende ############################"   >> $UDEV_FILE
}

#####
Add_2_Auto_Master()
{
[[ ! -e "$A_R_MASTER.backup" ]] && cp $A_R_MASTER "$A_R_MASTER.backup"
M_POUNT=$AUTOFS_FLD"/"$REC_HW_IDENT
AUTO_RULE_FILE=$A_R_FILE_PRE$REC_HW_IDENT
ALREADY_IN=$( grep $REC_HW_IDENT $A_R_MASTER )
if [[ ! -n $ALREADY_IN ]]
  then
    [[ ! -d $M_POUNT ]] &&  mkdir $M_POUNT
    echo "$M_POUNT   ${AUTO_RULE_FILE}  --timeout=5  --ghost"    >> $A_R_MASTER
    AUTO_MA_STAT=0
  else
    AUTO_MA_STAT=1
fi
return $AUTO_MA_STAT
}

###
Make_Auto_Rule()
{
[[ ! -e $AUTO_RULE_FILE ]] && echo $MARK2    >  $AUTO_RULE_FILE

for ((k=0;k<$PARTI_COUNT;k++))
do
  if [[ ${SYM_LINK_ARRAY[$k]} != "x_empty_x"  ]]; then
    AUTOKEY="DISK_${SYM_LINK_ARRAY[$k]}"
    DISK_DEV=":$DEV_PATH/${SYM_LINK_ARRAY[$k]}"
    echo "$AUTOKEY   $M_OPTION     $DISK_DEV" >>  $AUTO_RULE_FILE
  fi
done
}

###################### functions part2 ################################

#####
Ask_Kill()
{
dialog --backtitle "$BACKTITLE"\
       --colors\
       --title " Verwalten oder loeschen " \
       --extra-button \
       --extra-label " Reset all " \
       --ok-label " Part. verwalten "   \
       --no-label " abbrechen "         \
       --yesno "\n\n\
                         xxxxxxxxxxxxxxxxx\n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\
      \Z4\Zb\"Part. verwalten\"\Zn - bereits integrierte HW bearbeiten. \n\n\
         \Z4\Zb\" Reset all\"\Zn - Alles loeschen. \n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" $DIA_BOX2_SIZE
         YES_NO=$?
clear

(($YES_NO == 3)) && KILL_STAT=15 || KILL_STAT=$YES_NO

return $KILL_STAT
}

#####
Choose_HDD()
{
No_TEXT="USB Geraet Nr. "

LABELs=""
for AUTOFILE in $A_R_FILE_DIR/auto.*   ##  hier ist ein Fehler, wenns das nich gibt
  do
    LABELs="$LABELs $(echo $AUTOFILE | cut -d. -f2)" 
  done

LABEL_MENUITEMS=""; n=1
for LABEL in $LABELs    
  do
    LABEL_MENUITEMS="$LABEL_MENUITEMS$LABEL
$No_TEXT$n
"  
    ((++n))
  done

OIFS="$IFS"
IFS=$'\n'
LABEL_MENUITEMS_AR=($LABEL_MENUITEMS)
IFS="$OIFS"

REPEAT=0
while (( $REPEAT == 0 ))
  do 
    HELP_PRESSED="true"
    while [[ $HELP_PRESSED == "true" ]]
      do
        CH_LABEL=$(dialog \
         --backtitle "$BACKTITLE" \
         --extra-button\
         --extra-label " Hilfe "\
         --title " Auswahl USB-Speichergeraet " \
         --menu "\n\
          Bitte ein Geraet auswaehlen\n\
          Steuerung mit       [  UP  ]  [ DOWN ] \n\
          Zum Auszuwaehlen    <  OK  > \n\
          Zum Verlassen     < Abbrechen > "  $DIA_BOX_SIZE\
          "${LABEL_MENUITEMS_AR[@]}" 3>&1 1>&2 2>&3 3>&- )
        OK_CANCEL=$?
        clear

        CH_AUTOFILE="$A_R_FILE_DIR/auto.$CH_LABEL"
        DISK_STRING="$(<$CH_AUTOFILE grep DISK_ | cut -d" " -f1 )"

        HELP_PRESSED="false"; REPEAT=1
        case $OK_CANCEL in
            0) if [[ -n $DISK_STRING ]]
                 then
                   HDD_STAT=0 
                 else
                   INFO_TEXT="\n\n\n        fuer dieses Geraet\n wurde keine Part. erkannt.."
                   MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
                   sleep 5; clear
                   REPEAT=0
               fi;;
            1) HDD_STAT=1 ;;
            3) Show_Help $HELP3; HELP_PRESSED="true";;
        esac
      done
  done
return $HDD_STAT
}

####
Choose_Partit()
{
PARTI_TEXT1="Mountbare Partition Nr."
PARTI_TEXT2=" von "

DISK_ITEM=""; i=1
for DISK in $DISK_STRING
  do
    DISK_ITEM="$DISK_ITEM$DISK
$PARTI_TEXT1$i$PARTI_TEXT2$CH_LABEL
off
"
    ((++i))
  done

OIFS="$IFS"
IFS=$'\n'
DISK_ITEM_AR=($DISK_ITEM)
IFS="$OIFS"

REPEAT=0
while ((REPEAT==0))
  do
    SEL_OPTIONS=$(dialog \
     --backtitle "$BACKTITLE" \
     --title " Partitionauswahl " \
     --ok-label " integrieren "\
     --cancel-label " abbrechen "\
     --checklist "\n\
          Bitte waehlen Sie die Partition(en), \n\
          die Sie integrieren moechten, \n\
          oder waehlen Sie < abbrechen > "  $DIA_BOX_SIZE\
          "${DISK_ITEM_AR[@]}"        3>&1 1>&2 2>&3 3>&- )
    OK_CANCEL=$?
    clear

    case $OK_CANCEL in
       0) [[ -n $SEL_OPTIONS ]] && REPEAT=1;;
       1) REPEAT=1;;
    esac
 done

Convert_Data

return $OK_CANCEL
}

#####
Convert_Data()
{
CLEAN_SEL_OPTS=""
for SEL_OPTION in $SEL_OPTIONS
  do
    CLEAN_SEL_OPTS="$CLEAN_SEL_OPTS $( echo $SEL_OPTION | cut -d\" -f2 | cut -d\" -f1) "
  done

DISK_AR_IND=""
for CLEAN_SEL_OPT in $CLEAN_SEL_OPTS
  do
    k=0; 
    SOF_DISK_ITEM_AR=${#DISK_ITEM_AR[@]}
    for ((j=0;j<$SOF_DISK_ITEM_AR;j++))
      do
        DISK_UUID_AR[$k]=${DISK_ITEM_AR[$j]}; ((++j))
        DISK_LABL_AR[$k]=${DISK_ITEM_AR[$j]}; ((++j))
        DISK_AR_STAT=$(echo ${DISK_UUID_AR[$k]} | grep -c "$CLEAN_SEL_OPT")
        (( $DISK_AR_STAT != 0 )) && DISK_AR_IND="$DISK_AR_IND $k"
        ((++k))
      done
  done
}

#####
Choose_Target_Dir()
{
for dummy3 in $DISK_AR_IND
  do
    REPEAT=0
    while (( $REPEAT == 0 ))
      do
        SEL_TAR_DIR=$(dialog \
          --backtitle "$BACKTITLE"\
          --title " Auswahl des Medienverzeichnisses "\
          --cancel-label " Abbruch "\
          --extra-button\
          --extra-label " Inhalt anzeigen "\
          --menu "\n\
          Waehlen Sie bitte, wo die Partition \n\
          \"${DISK_LABL_AR[$dummy3]}\" \n\
          zur Verfuegung gestellt werden soll "  $DIA_BOX_SIZE\
          Media       "UBUNTU  standard Verzeichniss \"media\" "   \
          Musik       "easyVDR standard Verzeichniss \"mp3\"   "   \
          Video       "easyVDR standard Verzeichniss \"video0\""   \
          Filme1      "easyVDR standard Verzeichniss \"filme1\""   \
          Filme2      "easyVDR standard Verzeichniss \"filme2\""   \
          Filme3      "easyVDR standard Verzeichniss \"filme3\""   \
          Photos      "easyVDR standard Verzeichniss \"photos\""   \
          Sonstige    "manuelle Auswahl des Verzeichnisses"       3>&1 1>&2 2>&3)
        OK_CANCEL=$?
        clear

        INITIAL_SOURCE="$AUTOFS_FLD/$CH_LABEL/${DISK_UUID_AR[$dummy3]}"

        case $OK_CANCEL in
            0) Run_Action="Do_Link" ; RUN_OK=0 ;;
            3) Run_Action="Do_Show" ; RUN_OK=0 ;;
            *) RUN_OK=1; REPEAT=1;;
        esac

        if (( $RUN_OK == 0 )); then
          case  $SEL_TAR_DIR in
            Media) TARGET_DIR="/media/easyvdr01"        ; $Run_Action ;;
            Musik) TARGET_DIR="/media/easyvdr01/mp3"    ; $Run_Action ;;
           Video0) TARGET_DIR="/media/easyvdr01/video0" ; $Run_Action ;;
           Filme1) TARGET_DIR="/media/easyvdr01/filme1" ; $Run_Action ;;
           Filme2) TARGET_DIR="/media/easyvdr01/filme2" ; $Run_Action ;;
           Filme3) TARGET_DIR="/media/easyvdr01/filme3" ; $Run_Action ;;
           Photos) TARGET_DIR="/media/easyvdr01/photos" ; $Run_Action ;;
         Sonstige) Run_Other;;
          esac  
        fi
      done
  done
return $OK_CANCEL
}

#####
Do_Link()
{
MISSING_INPUT=0
while (( $MISSING_INPUT == 0 ))
  do
    REPEAT="true"
    while [[ $REPEAT == "true" ]]
      do
        RC_NAME=$(dialog \
            --backtitle "$BACKTITLE"\
            --extra-button\
            --extra-label " Hilfe "\
            --title " Linkname "\
            --inputbox "\n\n\
      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\
          Bitte geben Sie eine Bezeichnung an, unter dem Sie\n\
       auf Ihr USB-Geraet zugreifen moechten Z.B. \"Filme-extern\"\n\
                      ( keine Leerzeichen oder sowas ) \n\
      xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"\
            $DIA_BOX2_SIZE "Filme-extern" 3>&1 1>&2 2>&3 3>&- )
        OK_CANCEL=$?
        clear

        case $OK_CANCEL in
             0) Write_Link ;;
             1) REPEAT="false"; MISSING_INPUT=1 ;;
             3) Show_Help $HELP2
                REPEAT="true"  ;; 
        esac
      done

done
REPEAT=1
}

#####
Write_Link()
{
GOT_NAME=$RC_NAME
Check_Missing
if (( $MISSING_INPUT != 0 )); then
  if [ -e  $TARGET_DIR/$RC_NAME ]
    then
      INFO_TEXT="\n\n\n       Name bereits vergeben!"
      MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
      sleep 5; clear
      REPEAT="true"
    else
      ln -s "$INITIAL_SOURCE"  "$TARGET_DIR/$RC_NAME"
      Write_Autofs_Stat "$TARGET_DIR/$RC_NAME" "$INITIAL_SOURCE"
      REPEAT="false"
  fi
fi
}

#####
Do_Show()
{
FILE_2_SHOW="/tmp/.auto_usb_showfile"

ls -g -G $TARGET_DIR | cut -d: -f2 | cut -d" " -f2- | tail -n +2 > $FILE_2_SHOW
dialog --title " Inhalt von $SEL_TAR_DIR " \
       --backtitle "$BACKTITLE"\
       --textbox \
       $FILE_2_SHOW $DIA_BOX2_SIZE
clear
rm $FILE_2_SHOW
REPEAT=0
}

#####
Run_Other()
{
INFO_TEXT="\n\n\n      under development"
MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
sleep 5; clear
REPEAT=0
}

################ tools ##########################################

#####
Write_Autofs_Stat()  ##  Setup.State schreiben ##
{
I_LINK=$1; M_POINT=$2
[[ ! -e $AUTOFS_SETUP_STATE ]] && echo $MARK3            >  $AUTOFS_SETUP_STATE
sed -i '/"*USB-Disk Installer"*/d'                          $AUTOFS_SETUP_STATE
echo "# `date` USB-Disk Installer zuletzt ausgefuehrt"   >> $AUTOFS_SETUP_STATE
echo "# $MARK4 $I_LINK -> $M_POINT"                      >> $AUTOFS_SETUP_STATE
}

#####
Show_Help()
{
HELP=$1
#HELPFILE="$SETUP_HELP_DIR/$HELP" 
HELPFILE="$HELP" 
dialog  --textbox $HELPFILE   $DIA_BOX2_SIZE ; clear
}

#####
Check_Missing()
{
if [[ (! "$GOT_NAME") && ($OK_CANCEL == 0) ]]
  then
    dialog --title " Error:  fehlende Eingabe "\
           --backtitle "$BACKTITLE"\
           --colors\
           --pause "\n\n\
       \Z1\Zb !! ERROR !!\n\
       fehlende Eingabe!" $DIA_BOX3_SIZE $TIMEOUT
    MISSING_INPUT=0
  else 
    MISSING_INPUT=1
fi
}

#####
Good_Bye()
{
INFO_TEXT="\n\n\n      und tschuess"
MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
sleep 3; clear
}

##################### main runs #######################################
#####
Run_All()
{
[[ ! -d $AUTOFS_FLD   ]] && mkdir $AUTOFS_FLD
[[ ! -d $A_R_FILE_DIR ]] && mkdir $A_R_FILE_DIR
[[ ! -e $UDEV_FILE    ]] && touch $UDEV_FILE

Start_And_Check
RUN_STATUS=$?
if (( $RUN_STATUS == 0  )); then
  Set_Hw_Name
  RUN_STATUS=$?
  if (( $RUN_STATUS == 0  )); then
    Make_Udev
    Make_Auto_Rule
    Run_Link
    RUN_STATUS=$?
  fi
fi
return $RUN_STATUS
}

#####
Run_Link()
{
RUN_STATUS=0
[[ ! -d $AUTOFS_FLD   ]] && RUN_STATUS=12
[[ ! -d $A_R_FILE_DIR ]] && RUN_STATUS=13
[[ ! -e $UDEV_FILE    ]] && RUN_STATUS=14

if (( $RUN_STATUS == 0 )); then
  Choose_HDD
  RUN_STATUS=$?
  if (( $RUN_STATUS == 0 )); then
    Choose_Partit
    RUN_STATUS=$?
    if (( $RUN_STATUS == 0 )); then
      Choose_Target_Dir
      RUN_STATUS=$?
    fi
  fi
fi
return $RUN_STATUS
}

#####
Run_Kill()
{
dialog --backtitle "$BACKTITLE"      \
       --colors                      \
       --title " Deinstallation "    \
       --ok-label " Alles loeschen " \
       --no-label " abbrechen "      \
       --defaultno                   \
       --yesno "\n\n\
                         xxxxxxxxxxxxxxxxx\n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\
      \Z4\Zb\" Alle bisher integrierten Part. entfernen.\"\Zn\n\n\
         \Z4\Zb\" Alle angelegten Files entfernen.\"\Zn \n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" $DIA_BOX2_SIZE
         YES_NO=$?
clear

if (($YES_NO == 0))
   then  
     $KILLER; KILL_DONE=$1
   else
     KILL_DONE=1
fi

return $KILL_DONE
}

#####
Print_Message()
{
ERR_MESS=$1
case $ERR_MESS in
   0) ERR_TEXT=" scheint geklappt zu haben";;
   1) ERR_TEXT=" Installation abgebrochen";;
  11) ERR_TEXT=" Keine USB-HD gefunden";;
  12) ERR_TEXT=" $AUTOFS_FLD nicht gefunden";;
  13) ERR_TEXT=" $A_R_FILE_DIR nicht gefunden";;
  14) ERR_TEXT=" $UDEV_FILE nicht gefunden";;
  15) ERR_TEXT=" alles deinstalliert";;
  16) ERR_TEXT=" unknown error";;
  17) ERR_TEXT=" -- RIP --";;
   *) ERR_TEXT=" sonstiges";;
esac

INFO_TEXT="\n\n\n     $ERR_TEXT"
MiniInfo " " "$BACKTITLE" "$INFO_TEXT"
sleep 4; clear

Good_Bye
}

#####
Restart_Service()
{
service udev reload; udevadm trigger

SAS="$(service autofs status)"
SAS_RUNNING=$(echo $SAS | grep -c "start/running")
(( $SAS_RUNNING != 0 )) && service autofs restart || service autofs start
}

##################### main  ###########################################

Intro
case $SEL_MODE in
  USB-integrieren) Run_All ; STAT_MESS=$? ;;
   Part.verwalten) Ask_Kill; ASK_STAT=$?
           case  $ASK_STAT in
             15)  Run_Kill; STAT_MESS=$? ;;
              0)  Run_Link; STAT_MESS=$? ;;
              1)  STAT_MESS=1            ;;
              *)  STAT_MESS=16           ;;
           esac                   ;;
        Abbruch) STAT_MESS=1    ;;
esac

(( $STAT_MESS == 0 )) && Restart_Service

Print_Message $STAT_MESS

