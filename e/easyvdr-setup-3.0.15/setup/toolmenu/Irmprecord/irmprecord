#!/bin/bash
#
#  writes new keymap for irmp-ir-receiver -  "Martin edition"
#
#  v0.2  Captain_Beefheart 4 easyvdr / 1st useable
#  v0.4 C.B.   lot of fixes  23.01.14
#  v0.5 Martin Wording, try of little tuning
################################# defines ##########################################

. /usr/lib/vdr/easyvdr-config-loader                   ## common defines
. /usr/lib/vdr/functions/easyvdr-functions-lib         ## common functions
. /usr/share/easyvdr/setup/easyvdr-setup-defines       ## setup only defines
. /usr/share/easyvdr/setup/easyvdr-setup-functions     ## setup only functions

VERSION="v0.5"

TITLE=" irmprec. $VERSION fuer easyVDR $EASYVDR_VERSION "
BACKTITLE=" Keymap Erstellung für den IRMP USB Empfaenger"


FIELD_TEXT="unbelegt"
INFO_TXT1="Das ist das Programm um FB-Tasten mit dem USB-IRMP Empfaenger anzulernen."
INFO_TXT2="\n\n\n       OK - fertig"
INFO_TXT3="\n\
        Druecken Sie nun die Taste,\n\
 die Sie mit $SEL_RMT_COM belegen moechten\n\
      Sie haben max. 20 Sekunden Zeit!\n\
druecken!\n   druecken! \n   druecken! .... "
INFO_TXT4=" \n    Keine oder zu wenige Daten\n          empfangen!"

TMP_FILE="/tmp/.irmp_tmp_file"
RC_CMD_FILE="$SETUP/toolmenu/Irmprecord/RC-Commands"
IRMP_KEY_MAP="$CFG_DIR/irmp_keymap"

############################## functions ###############################

#####
Intro()
{
dialog --backtitle "$BACKTITLE"\
       --colors\
       --title " Intro -$TITLE" \
       --yes-label " Ja! ;-) "   \
       --no-label " abbrechen "         \
       --yesno "\n\n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\
            Dies ist ein Werkzeug um Keymaps fuer den\n\
       IRMP-USB Empfaenger zu erzeugen bzw. zu aendern.\n\
   Es ist \Zb\Z1nicht\Zn dafuer ausgelegt VDR-Befehle fuer einen Benutzer\n
 individuell zu belegen. (dafuer ist z.B. die remote.conf zustaendig)\n\
    Hier geht es darum, moeglichst vielen Tasten einer Fernbedienung\n\
      jeweils einen einzelnen, eindeutigen Systemcode zuzuweisen,\n\
             damit dann diese Keytable in die Distribution\n\
                      eingepflegt werden kann!\n\
   xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" $DIA_BOX2_SIZE
YES_NO=$?; clear 

return $YES_NO
}

#####
Check_Stat()
{
IRMPSTAT=0

if (pidof vdr)
  then
    MiniInfo "$TITLE" "$BACKTITLE" "\n\n Bitte den VDR stoppen."
    sleep 5; clear; IRMPSTAT=1
  else
    if [[ $LIRC_HW_CONF != "irmp_lirc" ]]; then
      MiniInfo "$TITLE" "$BACKTITLE" "\n\n Bitte den URB-IRMP im Setup auswaehlen."
      sleep 5; clear; IRMPSTAT=1
    fi

    (/usr/lib/easyvdr/easyvdr-start/easyvdr-irmplircd status | grep -q running ) || /usr/lib/easyvdr/easyvdr-start/easyvdr-irmplircd start > /dev/null 2>&1

    sleep 1

    if !(/usr/lib/easyvdr/easyvdr-start/easyvdr-irmplircd status | grep -q running); then
      MiniInfo " ERROR " "$BACKTITLE" "\n\n Der Treiber konnte nicht gestartet werden."
      sleep 5; clear; IRMPSTAT=1
    fi
fi

return $IRMPSTAT
}

#####
Init_Checkbox()
{
INIT_STAT=0
OLD_IFS=$IFS                             # sicher alten IFS
IFS=$'\n'                                 # IFS auf newline
  RMT_CMD_ARRAY=($(cat $RC_CMD_FILE))
IFS=$OLD_IFS                            # wiederherstellung des orginalen IFS

SIZE_of_RMT_CMD_ARRAY=${#RMT_CMD_ARRAY[@]}
for ((i=0;i<$SIZE_of_RMT_CMD_ARRAY;i++))
  do
    RMT_CMD_ARRAY[$i]="${RMT_CMD_ARRAY[$i]} $FIELD_TEXT"
  done

dialog --backtitle "$BACKTITLE"\
       --title "$TITLE"\
       --defaultno\
       --yesno "\n\n\
                     Keymap der aktuellen FB einlesen?. \n\
               Dies ermöglicht auf einen bestenden Stand aufzubauen" $DIA_BOX2_SIZE
READMAP=$?; clear

if (( $READMAP == 0 )); then  
  if [ -f $IRMP_KEY_MAP ]
    then
      if (pidof vdr);
        then
          MiniInfo "$TITLE" "$BACKTITLE" "\n\n Bitte den VDR stoppen."
          sleep 5; clear; INIT_STAT=1
        else
          Read_Former_Map
       fi
    else
      TEXT="\n\n\
      Keine Keytable gefunden!\n\
 Bitte im Setup eine FB auswaehlen."
      MiniInfo "$TITLE" "$BACKTITLE" "$TEXT"
      sleep 5; clear; INIT_STAT=1
  fi
fi
return $INIT_STAT
}

#####  
Read_Former_Map()
{
OLD_IFS=$IFS                               # sicher alten IFS
IFS=$'\n'                                   # IFS auf newline
  OLD_RMT_CMD_ARRAY=($(cat $IRMP_KEY_MAP))
IFS=$OLD_IFS                                # wiederherstellung des orginalen IFS

SIZE_of_OLD_RMT_CMD_ARRAY=${#OLD_RMT_CMD_ARRAY[@]}
 for ((i=0;i<$SIZE_of_RMT_CMD_ARRAY;i++))
  do
    for ((j=0;j<$SIZE_of_OLD_RMT_CMD_ARRAY;j++))
      do 
        AKT_DEF_LIN=${RMT_CMD_ARRAY[$i]};     set -- $AKT_DEF_LIN
        AKT_DEF_DAT=$2; AKT_DEF_CMD=$1
        AKT_OLD_LIN=${OLD_RMT_CMD_ARRAY[$j]}; set -- $AKT_OLD_LIN
        AKT_OLD_DAT=$1; AKT_OLD_CMD=$2
        [[ $AKT_DEF_CMD == $AKT_OLD_CMD ]] && RMT_CMD_ARRAY[$i]="$AKT_DEF_CMD $AKT_OLD_DAT"
      done
  done
}

######
Show_Menu()
{
SEL_RMT_COM=$(dialog \
 --backtitle "$BACKTITLE" \
 --title " aktuelle Belegung " \
 --extra-button\
 --extra-label " loechen "\
 --ok-label " neu belegen "\
 --cancel-label " abrechen "\
 --help-button\
 --help-label " speichern "\
 --menu "\
             Hauptmenu \n\n\
                    System-Befehl     gesendeter Code\n"         $DIA_BOX_SIZE \
      ${RMT_CMD_ARRAY[@]}  3>&1 1>&2 2>&3 3>&- )
OK_CANCEL=$?
clear
return $OK_CANCEL
}

######
Read_Signals()
{
REPEAT=0
while (($REPEAT==0))
  do
    [ -f $TMP_FILE ] && SLEEP=0 || SLEEP=10

    if (( $SLEEP != 0 )); then
      TEXT="\n\n\
Druecken Sie gleich bitte (~10 mal)\n\
die entspr. Taste der Fernbedienung\n\
    bis  \"fertig\" erscheint.\n\n\
 Diese Info kommt danach nicht mehr!"
      MiniInfo "$TITLE" "$BACKTITLE" "$TEXT"
      sleep $SLEEP; clear
    fi

    COM_INFO_TEXT="\n\
   -> Taste fuer \"$SEL_RMT_COM\"!\n\
     Sie haben ~20 Sekunden Zeit!\n\
   druecken!\n   druecken! \n   druecken! .... "
    MiniInfo "$TITLE" "$BACKTITLE" "$COM_INFO_TEXT"

    irw > $TMP_FILE &
    PID_OF_IRW=$!; disown $PID_OF_IRW
      COUNT_STAT=0; TIME_COUNT=0
      while (( $COUNT_STAT == 0 )) && (( $TIME_COUNT < 200 )) 
        do
          WC_OUTPUT=$(wc -l  $TMP_FILE); set -- $WC_OUTPUT
          (($1 > 11)) &&  COUNT_STAT=1
          ((TIME_COUNT++))
          sleep 0.1
        done
    kill $PID_OF_IRW

    if (( $TIME_COUNT < 200 ))
      then
        MiniInfo "$TITLE" "$BACKTITLE" "$INFO_TXT2"
        sleep 2; clear; RET_STAT=0; REPEAT=1
      else
        dialog --backtitle "$BACKTITLE"\
         --title "$TITLE"\
         --extra-button\
         --extra-label " andere Taste versuchen "\
         --yesno "\n\n\
                     nochmal versuchen ?. \n\
               xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" $DIA_BOX2_SIZE
        OK_CANCEL=$?; clear

        case $OK_CANCEL in 
           0) REPEAT=0 ;;
           1) REPEAT=1; RET_STAT=1 ;;
           3) REPEAT=1; RET_STAT=3 ;;
        esac
    fi
  done

return $RET_STAT
}

#####
Process_FB_Data()
{
OLD_IFS=$IFS                       # sicher alten IFS
IFS=$'\n'                           # IFS auf newline
  DATA_ARRAY=($(cat $TMP_FILE))   # ausgabe in Array
IFS=$OLD_IFS                       # wiederherstellung des orginalen IFS

#### repeat Kennung entfernen
SIZE_of_DATA_ARRAY=${#DATA_ARRAY[@]}
for ((i=0;i<$SIZE_of_DATA_ARRAY;i++))
  do
    NEW_ELEMENT=${DATA_ARRAY[$i]}; set -- $NEW_ELEMENT
    dummy1=$1
    dummy2=${dummy1%?}     ## Letztes Zeichen entfernen - hier 0 oder 1
    NEW_DATA_ARRAY[$i]=$dummy2
  done

### Fehler entfernen
SIZE_of_NEW_DATA_ARRAY=${#NEW_DATA_ARRAY[@]}
ACT_COUNTER=$(( $SIZE_of_NEW_DATA_ARRAY - 1 ))
REPEAT=0; ERROR_STAT=0
while (($REPEAT == 0))
  do
    for ((i=0;i<$ACT_COUNTER;i++))
      do
        if (($ACT_COUNTER > 1 ))
          then
            if [[ ${NEW_DATA_ARRAY[$i]} != ${NEW_DATA_ARRAY[$i+1]} ]]
              then 
                unset NEW_DATA_ARRAY[$i]; unset NEW_DATA_ARRAY[$i+1]
                NEW_DATA_ARRAY=(${NEW_DATA_ARRAY[@]})
                SIZE_of_NEW_DATA_ARRAY=${#NEW_DATA_ARRAY[@]}
                ACT_COUNTER=$(( $SIZE_of_NEW_DATA_ARRAY - 1 ))
                REPEAT=0
                break
              else
                REPEAT=1
            fi
          else
            ERROR_TEXT="\n\
   Daten wurden nicht erkannt\n\
       nochmal versuchen\n\
      oder im Forum nachragen!" 
            MiniInfo " ERROR " "$BACKTITLE" "$ERROR_TEXT"
            sleep 5; clear
            REPEAT=1; ERROR_STAT=1 
        fi
      done
  done

if (( $ERROR_STAT == 0 )); then
  RESULT_DATA="${NEW_DATA_ARRAY[0]}0"  # vorher entferntes letzes Zeichen als 0 dazu
  for ((i=0;i<$SIZE_of_RMT_CMD_ARRAY;i++))
    do
      RMT_AR_ELEMENT="${RMT_CMD_ARRAY[$i]}"; set -- $RMT_AR_ELEMENT
      if [[ $1 == $SEL_RMT_COM ]]; then
        RC_CMD_ELEMENT=${RMT_CMD_ARRAY[$i]}; set -- $RC_CMD_ELEMENT 
        RMT_CMD_ARRAY[$i]="$1 $RESULT_DATA"
        OLD_SIGNAL=$2
        INSERT_INDEX=$i
      fi
   done

### check double
  COUNT=0
  for ((i=0;i<$SIZE_of_RMT_CMD_ARRAY;i++))
    do
      RMT_AR_ELEMENT="${RMT_CMD_ARRAY[$i]}"; set -- $RMT_AR_ELEMENT
      if [[ $2 == $RESULT_DATA ]]; then
        (( COUNT++ ))
        if (($COUNT > 1)); then
          RC_CMD_ELEMENT=${RMT_CMD_ARRAY[$INSERT_INDEX]}; set -- $RC_CMD_ELEMENT
          OLD_CODE=$1
          Ask_4_Reset
          RESET=$?
          case $RESET in
            0) Do_Reset_Cmd ;;
            1) RMT_CMD_ARRAY[$INSERT_INDEX]="$OLD_CODE $OLD_SIGNAL";;
          esac 
        fi
      fi
    done 
fi
}

#####
Ask_4_Reset()
{
dialog --backtitle "$BACKTITLE"\
       --title " ERROR "\
       --defaultno\
       --yes-label " reset "\
       --no-label " abbrechen "\
       --yesno "\n\n\
                           FEHLER!\n\n\
     Der empfangene Code ist bereits auf einen anderen Befehl gemapt!\n\n\
     -- bei < abbrechen > wird der alte Zustand wiederhergestellt.\n\
     -- bei <   reset   > werden beide Einträge auf \"$FIELD_TEXT\" gelegt.\n\n\
               xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" $DIA_BOX2_SIZE
ASK_STAT=$?
clear
return $ASK_STAT
}

######
Do_Reset_Cmd()
{
for ((j=0;j<$SIZE_of_RMT_CMD_ARRAY;j++))
  do
    RMT_AR_ELEMENT="${RMT_CMD_ARRAY[$j]}"; set -- $RMT_AR_ELEMENT
    [[ "$RESULT_DATA" == "$2"  ]] && RMT_CMD_ARRAY[$j]="$1 $FIELD_TEXT"
  done 
}

#####
Ask_Write()
{
dialog --backtitle "$BACKTITLE"\
       --title "$TITLE"\
       --no-label " abbrechen "\
       --yes-label " speichern "\
       --yesno "\n\n\
                     Neue Keymap schreiben? \n\
        Die neue  \"irmp_keymap\" wird in $CFG_DIR erstellt.\n\
         Falls bereis eine solche Datei dort vorhanden ist,\n\
          so wird diese in \"irmp_keymap.save\" umbenannt.\n\
      Anschliessend wird der Treiber zum Testen neu gestartet.\n\n\
   Bei Erfolg, bitte diese Datei im easyVDR Forum veroeffentlichen,\n\
                 Mit Informationen zur Fernbedienung! ;-) -\n\
          Dann kann diese Map in die Distrie eingepflegt werden" $DIA_BOX2_SIZE
READMAP=$?; clear
return $READMAP
}

#################  mains #####################

#####
Get_Data()
{
Read_Signals
case $? in
  0) Process_FB_Data; DATA_STAT=0;;
  1) DATA_STAT=1;;
  3) DATA_STAT=0;;
esac
return $DATA_STAT
}

#####
Write_Irmp_Map()
{
Ask_Write
if (($? == 0 ))
  then
    [ -f $IRMP_KEY_MAP ] && mv -f $IRMP_KEY_MAP "$IRMP_KEY_MAP.SAVE"

    SIZE_of_RESULT=${#RMT_CMD_ARRAY[@]}
    for ((i=0;i<$SIZE_of_RESULT;i++))
      do
        dummy="${RMT_CMD_ARRAY[$i]}"; set -- $dummy
        dummy2=$1; dummy3=$2
        [[ $dummy3 != "$FIELD_TEXT"  ]] &&  echo "$dummy3 $dummy2" >> $IRMP_KEY_MAP
      done
    /usr/lib/easyvdr/easyvdr-start/easyvdr-irmplircd stop; sleep 1; /usr/lib/easyvdr/easyvdr-start/easyvdr-irmplircd start
  else
    Adios
fi
}

######
Adios()
{
MiniInfo "$TITLE" "$BACKTITLE" "\n\n   Dann eben nich :-("
sleep 5; clear
}

#####
Del_Cmd()
{
for ((i=0;i<$SIZE_of_RMT_CMD_ARRAY;i++))
  do
    RMT_AR_ELEMENT="${RMT_CMD_ARRAY[$i]}"; set -- $RMT_AR_ELEMENT
    [[ "$SEL_RMT_COM" == "$1"  ]] && RMT_CMD_ARRAY[$i]="$1 $FIELD_TEXT"
  done 
}

####################### main ########################

Intro
if (($? == 0))
  then
    Check_Stat
    if (($? == 0)); then
      rm -f $TMP_FILE
      Init_Checkbox
      if (($? == 0)); then
        REPEAT=0
        while (($REPEAT == 0))
          do
            Show_Menu
            MENU_STAT=$? 
            case $MENU_STAT in
                0) Get_Data; REPEAT=$?      ;;
                1) Adios; REPEAT=1          ;;
                2) Write_Irmp_Map; REPEAT=1 ;;
                3) Del_Cmd                  ;;
                *) echo Fehler-$MENU_STAT   ;;
            esac
        done
      fi	
    fi
  else
    Adios
fi

