#ifndef __Ax_Mail_LogRecord_H__
#define __Ax_Mail_LogRecord_H__
//=============================================================================
/*
 * See the file README in the main directory for a description of
 * this software, copyright information, and how to reach the author.
 *
 * Author: alex
 * Date:   13.09.2005
 *
 * Last modfied:
 *   $Author: alex $
 *   $Date: 2005-07-10 18:58:38 +0200 (So, 10 Jul 2005) $
 *   $Revision: 1.10 $
 */
//=============================================================================

//=============================================================================
//     includes
//=============================================================================

//----- qt --------------------------------------------------------------------
//----- CORBA -----------------------------------------------------------------
//----- ICE -------------------------------------------------------------------
//----- C++ -------------------------------------------------------------------
#include <string>
#include <list>

//----- C ---------------------------------------------------------------------
//----- AxLib -----------------------------------------------------------------
#include <Ax/Mail/Globals.h>

//----- local -----------------------------------------------------------------
//----- vdr -------------------------------------------------------------------
//----- c-client --------------------------------------------------------------
//----- other includes --------------------------------------------------------

//=============================================================================
//     namespaces
//=============================================================================
namespace Ax   {
namespace Mail {

//=========================================================================
//     enum
//=========================================================================
/** to hide the c-client error-levels we define our own here!
 */
enum LogLevel
{
  LL_FATAL        ///< F
, LL_ERROR        ///< E
, LL_WARN         ///< W
, LL_BYE          ///< B
, LL_INFO         ///< I
, LL_DEBUG        ///< D
, LL_UNKNOWN      ///< U
, LL_CALLBACK     ///< C callbacks
, LL_INVALID      ///< N (no valid LogRecord)
};

//=========================================================================
//     class LogRecord
//=========================================================================
class LogRecord
{
  public:
    //---------------------------------------------------------------------
    //     LogRecord()
    //---------------------------------------------------------------------
    LogRecord(const std::string theMsg, LogLevel theLevel);

    //---------------------------------------------------------------------
    //     ~LogRecord()
    //---------------------------------------------------------------------
    ~LogRecord();

    //---------------------------------------------------------------------
    //     msg()
    //---------------------------------------------------------------------
    const std::string &msg() const { return myMsg; }

    //---------------------------------------------------------------------
    //     level()
    //---------------------------------------------------------------------
    LogLevel level() const { return myLevel; }

    //---------------------------------------------------------------------
    //     tmsg()
    //---------------------------------------------------------------------
    std::string tmsg() const;

    //---------------------------------------------------------------------
    //     attributes
    //---------------------------------------------------------------------
  private:
    LogLevel    myLevel;
    std::string myMsg;
}; // class LogRecord

//=========================================================================
//     typedefs
//=========================================================================
typedef std::list<LogRecord> LogCltn;

//=========================================================================
//     class LogHandler
//=========================================================================
class LogHandler
{
  private:
    //---------------------------------------------------------------------
    //     LogHandler()
    //---------------------------------------------------------------------
    LogHandler(const LogHandler &);

    //---------------------------------------------------------------------
    //     operator=()
    //---------------------------------------------------------------------
    LogHandler &operator=(const LogHandler &);

  public:
    //---------------------------------------------------------------------
    //     LogHandler()
    //---------------------------------------------------------------------
    LogHandler(const std::string &theName);

    //---------------------------------------------------------------------
    //     ~LogHandler()
    //---------------------------------------------------------------------
    ~LogHandler();

    //---------------------------------------------------------------------
    //     ErrFlag2LogLevel()
    //---------------------------------------------------------------------
    /** maps c-client error-flags to my own LogLevels
     */
    static LogLevel ErrFlag2LogLevel(long theErrorFlag);

    //---------------------------------------------------------------------
    //     Level2Char()
    //---------------------------------------------------------------------
    static std::string Level2Char(LogLevel theLevel);

    //---------------------------------------------------------------------
    //     getRecords()
    //---------------------------------------------------------------------
    const LogCltn &getRecords() const;

    //---------------------------------------------------------------------
    //     getLastMsg()
    //---------------------------------------------------------------------
    std::string getLastMsg(LogLevel theLevel) const;

    //---------------------------------------------------------------------
    //     getLastImportantMsg()
    //---------------------------------------------------------------------
    std::string getLastImportantMsg(const std::string &theMsgIfNone = std::string("")) const;

    //---------------------------------------------------------------------
    //     clear()
    //---------------------------------------------------------------------
    void clear();

    //---------------------------------------------------------------------
    //     isEmptys()
    //---------------------------------------------------------------------
    bool isEmpty() const;

    //---------------------------------------------------------------------
    //     setMaxSize()
    //---------------------------------------------------------------------
    void setMaxSize(LogCltn::size_type theMaxSize);

    //---------------------------------------------------------------------
    //     log()
    //---------------------------------------------------------------------
    void log(LogLevel theLevel, const std::string &theMsg);

  private:
    //---------------------------------------------------------------------
    //     attributes
    //---------------------------------------------------------------------
    std::string        myName;
    LogCltn::size_type myMaxSize;
    LogCltn            myLogCltn;

}; // class LogHandler

//=============================================================================
//     namespaces
//=============================================================================
} // Mail
} // Ax

#endif

