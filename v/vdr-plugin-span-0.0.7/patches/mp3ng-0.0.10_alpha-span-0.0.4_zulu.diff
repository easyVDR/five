diff -ruN mp3ng-0.0.10_alpha/decoder-ogg.h mp3ng-0.0.10_zulu/decoder-ogg.h
--- mp3ng-0.0.10_alpha/decoder-ogg.h	2006-06-19 15:19:32.000000000 +0200
+++ mp3ng-0.0.10_zulu/decoder-ogg.h	2007-03-21 14:40:01.000000000 +0100
@@ -49,8 +49,8 @@
   ~cOggFile();
   bool Open(bool log=true);
   void Close(void);
-  long long cOggFile::Seek(long long posMs=0, bool relativ=false);
-//  long long Seek(long long posMs=0, bool relativ=false);
+//  long long cOggFile::Seek(long long posMs=0, bool relativ=false);
+  long long Seek(long long posMs=0, bool relativ=false);
   int Stream(short *buffer, int samples);
   bool CanSeek(void) { return canSeek; }
   long long IndexMs(void);
diff -ruN mp3ng-0.0.10_alpha/i18n.c mp3ng-0.0.10_zulu/i18n.c
--- mp3ng-0.0.10_alpha/i18n.c	2006-08-28 00:09:21.000000000 +0200
+++ mp3ng-0.0.10_zulu/i18n.c	2007-03-21 14:40:01.000000000 +0100
@@ -2289,7 +2289,7 @@
   },
 // start of MP3 specific phrases
   { "MP3-NextGen",
-    "MP3-NextGen-Audioplayer",
+    "Audioplayer",
     "", // TODO
     "", // TODO
     "", // TODO
diff -ruN mp3ng-0.0.10_alpha/Makefile mp3ng-0.0.10_zulu/Makefile
--- mp3ng-0.0.10_alpha/Makefile	2006-09-02 23:05:14.000000000 +0200
+++ mp3ng-0.0.10_zulu/Makefile	2007-03-21 14:40:01.000000000 +0100
@@ -66,10 +66,6 @@
 LIBDIR = ../../lib
 TMPDIR = /tmp
 
-### Allow user defined options to overwrite defaults:
-
--include $(VDRDIR)/Make.config
-
 # The official name of this plugin.
 # This name will be used in the '-P...' option of VDR to load the plugin.
 # By default the main source file also carries this name.
@@ -77,6 +73,10 @@
 PLUGIN  = mp3ng
 PLUGIN2 = mplayer
 
+### Allow user defined options to overwrite defaults:
+
+-include $(VDRDIR)/Make.config
+
 ifndef WITHOUT_MP3
   ALL += libvdr-$(PLUGIN).so
 endif
diff -ruN mp3ng-0.0.10_alpha/mp3control.c mp3ng-0.0.10_zulu/mp3control.c
--- mp3ng-0.0.10_alpha/mp3control.c	2006-09-02 05:54:47.000000000 +0200
+++ mp3ng-0.0.10_zulu/mp3control.c	2007-03-21 14:40:01.000000000 +0100
@@ -233,7 +233,12 @@
 
   if(visible) {
     delete osd; osd=0;
+#if VDRVERSNUM >= 10500
+    visible = false;
+    SetNeedsFastResponse(visible);
+#else
     needsFastResponse=visible=false;
+#endif
     }
 }
 
@@ -367,7 +372,11 @@
 /*
   if(MP3Skin.isMpeg == 1) {
     showcoveronly = false;
+#if VDRVERSNUM >= 10500
+    SetNeedsFastResponse(true);
+#else
     needsFastResponse = true;
+#endif
     return;
   }    
 */
@@ -443,6 +452,9 @@
     ShowStatus(true);
 //    needsFastResponse=visible=true;
     visible=true;
+#if VDRVERSNUM >= 10500
+    SetNeedsFastResponse(visible);
+#endif
     delete lastMode; lastMode=0;
   }
 
@@ -475,7 +487,11 @@
     if(flush) Flush();
   }
 
+#if VDRVERSNUM >= 10500
+  SetNeedsFastResponse(false);
+#else
   needsFastResponse=false;
+#endif
   delete lastMode; lastMode=mode;
   refresh = false;
 
@@ -840,7 +856,12 @@
 
       osd->Flush();
       ShowStatus(true);
+#if VDRVERSNUM >= 10500
+      visible = true;
+      SetNeedsFastResponse(visible);
+#else
       needsFastResponse=visible=true;
+#endif
 
       fliptime=listtime=0; flipint=0; flip=-1; top=lastTop=-1; lastIndex=lastTotal=-1;
       delete lastMode; lastMode=0;
@@ -1142,13 +1163,16 @@
 
 	   if (cPluginManager::CallFirstService(SPAN_GET_BAR_HEIGHTS_ID, NULL) && ShowSA)	{
 	     Span_GetBarHeights_v1_0 GetBarHeights;
- 	     int bar;
- 	     int *barHeights = new int[bandsSA];
- 	     int *barHeightsLeftChannel = new int[bandsSA];
- 	     int *barHeightsRightChannel = new int[bandsSA];
- 	     int volumeLeftChannel;
- 	     int volumeRightChannel;
- 	     int volumeBothChannels;
+ 	     unsigned int bar;
+ 	     unsigned int *barHeights = new unsigned int[bandsSA];
+ 	     unsigned int *barHeightsLeftChannel = new unsigned int[bandsSA];
+ 	     unsigned int *barHeightsRightChannel = new unsigned int[bandsSA];
+ 	     unsigned int volumeLeftChannel;
+ 	     unsigned int volumeRightChannel;
+ 	     unsigned int volumeBothChannels;
+ 	     unsigned int *barPeaksBothChannels = new unsigned int[bandsSA];
+ 	     unsigned int *barPeaksLeftChannel = new unsigned int[bandsSA];
+ 	     unsigned int *barPeaksRightChannel = new unsigned int[bandsSA];
  								
  	     GetBarHeights.bands 					= bandsSA;
  	     GetBarHeights.barHeights				        = barHeights;
@@ -1159,6 +1183,9 @@
  	     GetBarHeights.volumeBothChannels		                = &volumeBothChannels;
  	     GetBarHeights.name						= "MP3-NextGen";
  	     GetBarHeights.falloff					= MP3Setup.FalloffSA;
+ 	     GetBarHeights.barPeaksBothChannels		= barPeaksBothChannels;
+ 	     GetBarHeights.barPeaksLeftChannel		= barPeaksLeftChannel;
+ 	     GetBarHeights.barPeaksRightChannel		= barPeaksRightChannel;
  			
  	     if ( cPluginManager::CallFirstService(SPAN_GET_BAR_HEIGHTS_ID, &GetBarHeights )) {
 
@@ -1167,39 +1194,68 @@
 //lh +5*fh +fh/2 -1 -128
  					
 	       int i;
+	       int barPeakHeight = 3;
                int barWidth =0;
 	       int coverleft= x1 -128 -3*fw;
-	       int covertop = lh +5*fh +fh/2 -127;
-
+	       int covertop = lh +5*fh +fh/2 -129;
+	       int barBase = 122;
+	       int barPeak = 0;
+			if ( player != NULL)
+			{
  	       for ( i=0; i < bandsSA; i++ ) {
 
                  switch(visualization) {
 		   case 1:
  	               barWidth = 128/bandsSA;
 //printf("CASE 1 AKTIV: barwidth=%d channels=%d bands=%d\n", barWidth, channelsSA, bandsSA);
- 		       if (player != NULL) {
  		         bar = barHeights[i];
- 		         osd->DrawRectangle(coverleft +(i*barWidth), covertop, coverleft + (i*barWidth) +barWidth -1, covertop + 110 - bar, clrBlack);
-		       }
+ 		         barPeak = barPeaksBothChannels[i];
+ 		       		if ( barPeak > 0 )
+ 		       		{
+ 		       			osd->DrawRectangle(coverleft +(i*barWidth), covertop, coverleft + (i*barWidth) +barWidth -1, covertop + barBase - barPeak - barPeakHeight, clrBlack);
+ 		       			osd->DrawRectangle(coverleft +(i*barWidth), covertop + barBase - barPeak+1, coverleft + (i*barWidth) +barWidth -1, covertop + barBase - bar, clrBlack);
+ 		       		}
+ 		       		else
+ 		       		{
+ 		       			osd->DrawRectangle(coverleft +(i*barWidth), covertop, coverleft + (i*barWidth) +barWidth -1, covertop + barBase - bar, clrBlack);
+ 		       		}
 		       break;
 		   case 2:
  	               barWidth = 64/bandsSA;
 //printf("CASE 2 AKTIV: barwidth=%d channels=%d bands=%d\n", barWidth, channelsSA, bandsSA);
- 		       if (player != NULL) {
+
  		         bar = barHeightsLeftChannel[i];
- 		         osd->DrawRectangle(coverleft +(i*barWidth)    , covertop, coverleft +(i*barWidth) +barWidth -1    , covertop + 110 - bar, clrBlack);
+ 		         barPeak = barPeaksLeftChannel[i];
+ 		         if ( barPeak > 0 )
+ 		       		{
+ 		       			osd->DrawRectangle(coverleft +(i*barWidth), covertop, coverleft + (i*barWidth) +barWidth -1, covertop + barBase - barPeak - barPeakHeight, clrBlack);
+ 		       			osd->DrawRectangle(coverleft +(i*barWidth), covertop + barBase - barPeak+1, coverleft + (i*barWidth) +barWidth -1, covertop + barBase - bar, clrBlack);
+ 		       		}
+ 		       		else
+ 		       		{
+ 		       			osd->DrawRectangle(coverleft +(i*barWidth)    , covertop, coverleft +(i*barWidth) +barWidth -1    , covertop + barBase - bar, clrBlack);
+ 		       		}
  		         bar = barHeightsRightChannel[i];
- 		         osd->DrawRectangle(coverleft +64 +(i*barWidth), covertop, coverleft +64 +(i*barWidth) +barWidth -1, covertop + 110 - bar, clrBlack);
-		       }
+ 		         barPeak = barPeaksRightChannel[i];
+ 		         if ( barPeak > 0 )
+ 		       		{
+ 		       			osd->DrawRectangle(coverleft +64 +(i*barWidth), covertop, coverleft +64 +(i*barWidth) +barWidth -1, covertop + barBase - barPeak - barPeakHeight, clrBlack);
+						osd->DrawRectangle(coverleft +64 +(i*barWidth), covertop + barBase - barPeak+1, coverleft +64 +(i*barWidth) +barWidth -1, covertop + barBase - bar, clrBlack);
+ 		       		}
+ 		       		else
+ 		       		{
+ 		       			osd->DrawRectangle(coverleft +64 +(i*barWidth), covertop, coverleft +64 +(i*barWidth) +barWidth -1, covertop + barBase - bar, clrBlack);
+ 		       		}
 		       break;
                    case 3:
  	               barWidth = 64;
-//printf("CASE 2 AKTIV: barwidth=%d channels=%d bands=%d\n", barWidth, channelsSA, bandsSA);
-		       osd->DrawRectangle(coverleft           , covertop, coverleft +(barWidth -1), covertop + 110 - volumeLeftChannel,  clrBlack);
- 		       osd->DrawRectangle(coverleft +barWidth , covertop, coverleft +128          , covertop + 110 - volumeRightChannel, clrBlack);
+//printf("CASE 3 AKTIV: barwidth=%d channels=%d bands=%d\n", barWidth, channelsSA, bandsSA);
+		       osd->DrawRectangle(coverleft           , covertop, coverleft +(barWidth -1), covertop + barBase - volumeLeftChannel,  clrBlack);
+ 		       osd->DrawRectangle(coverleft +barWidth , covertop, coverleft +128          , covertop + barBase - volumeRightChannel, clrBlack);
                        break;
 		   default: break;
-		 }         
+		 }
+ 	       }         
 	       }
 
 /* 	       if (channelsSA == 1) {
@@ -1218,9 +1274,12 @@
  	       flush = true;
  	     }
  				
- 	     delete barHeights;
- 	     delete barHeightsLeftChannel;
- 	     delete barHeightsRightChannel;
+ 	     delete [] barHeights;
+ 	     delete [] barHeightsLeftChannel;
+ 	     delete [] barHeightsRightChannel;
+ 	     delete [] barPeaksBothChannels;
+ 	     delete [] barPeaksLeftChannel;
+ 	     delete [] barPeaksRightChannel;
  	   }
  	 }
  
@@ -1670,10 +1729,9 @@
 #endif	  	  
         }
     default:
-      ShowSA=true;
       return osUnknown;
     }
-
+  ShowSA=true;
   return osContinue;
   }
 }
diff -ruN mp3ng-0.0.10_alpha/mp3ng.c mp3ng-0.0.10_zulu/mp3ng.c
--- mp3ng-0.0.10_alpha/mp3ng.c	2006-09-02 05:49:47.000000000 +0200
+++ mp3ng-0.0.10_zulu/mp3ng.c	2007-03-21 14:36:14.000000000 +0100
@@ -114,6 +114,7 @@
   else isyslog("mp3ng: Loading themefile\n");     
   i18n_name=Name();
   MP3Sources.Load(AddDirectory(ConfigDirectory(),"mp3ng/mp3sources.conf"));
+  dsyslog("%s", ConfigDirectory());
   if(MP3Sources.Count()<1) {
      esyslog("ERROR: you should have defined at least one source in mp3sources.conf");
      fprintf(stderr,"No source(s) defined in mp3sources.conf\n");
@@ -279,10 +280,10 @@
   Add(new cMenuEditBoolItem(tr("Setup.MP3$Store rating in file"),       &MP3Setup.RateInFile));
   Add(new cMenuEditBoolItem(tr("Setup.MP3$Rating as first red key"),    &MP3Setup.RatingFirst));
 #ifdef HAVE_VDR_SPEZIAL
-  Add(new cMenuEditIntItem(tr("Setup.MP3$Display tracks"),              &MP3Setup.Rowcount,4 ,9));
+  Add(new cMenuEditIntItem(tr("Setup.MP3$Display tracks"),              &MP3Setup.Rowcount,4 ,20));
   Add(new cMenuEditBoolItem(tr("Setup.MP3$Use extensions for 4MB Mod"), &MP3Setup.FullSize));
 #else
-  Add(new cMenuEditIntItem(tr("Setup.MP3$Display tracks"),              &MP3Setup.Rowcount,4 ,8));
+  Add(new cMenuEditIntItem(tr("Setup.MP3$Display tracks"),              &MP3Setup.Rowcount,4 ,20));
 #endif
   Add(new cMenuEditBoolItem(tr("Setup.MP3$Show filename in search (faster)"),   &MP3Setup.ShowFileName));
   Add(new cMenuEditIntItem(tr("Setup.MP3$Max. results while search"),   &MP3Setup.MaxResult,1 ,50000));
@@ -375,4 +376,27 @@
 #endif
 }
 
+bool cPluginMp3::Service(const char *Id, void *Data)
+{
+	if (strcmp(Id, SPAN_PROVIDER_CHECK_ID) == 0)
+	{
+		if (Data)
+		{
+			*((Span_Provider_Check_1_0*)Data)->isActive = true;
+		}
+		return true;
+	}
+	
+	if (strcmp(Id, SPAN_CLIENT_CHECK_ID) == 0)
+	{
+		if ( MP3Setup.EnableSpectrumAnalyzer && (Data) )
+		{
+			*((Span_Client_Check_1_0*)Data)->isActive = true;
+		}
+		return true;
+	}
+	
+	return false;
+}
+
 VDRPLUGINCREATOR(cPluginMp3); // Don't touch this!
diff -ruN mp3ng-0.0.10_alpha/mp3ng.h mp3ng-0.0.10_zulu/mp3ng.h
--- mp3ng-0.0.10_alpha/mp3ng.h	2006-09-01 09:01:05.000000000 +0200
+++ mp3ng-0.0.10_zulu/mp3ng.h	2007-03-21 14:40:01.000000000 +0100
@@ -30,6 +30,7 @@
   virtual cOsdObject *MainMenuAction(void);
   virtual cMenuSetupPage *SetupMenu(void);
   virtual bool SetupParse(const char *Name, const char *Value);
+  virtual bool Service(const char *Id, void *Data);
 };
 
 class cMenuSetupMP3 : public cMenuSetupPage {
diff -ruN mp3ng-0.0.10_alpha/mplayer.c mp3ng-0.0.10_zulu/mplayer.c
--- mp3ng-0.0.10_alpha/mplayer.c	2006-02-06 13:34:12.000000000 +0100
+++ mp3ng-0.0.10_zulu/mplayer.c	2007-03-21 14:40:01.000000000 +0100
@@ -226,7 +226,12 @@
 #else
     Interface->Close();
 #endif
+#if VDRVERSNUM >= 10500
+    visible = modeOnly = false;
+    SetNeedsFastResponse(visible);
+#else
     needsFastResponse=visible=modeOnly=false;
+#endif
     }
 }
 
@@ -291,7 +296,13 @@
       Interface->Clear();
       if(MPlayerSetup.OsdPos>0) Interface->Fill(0,3,Interface->Width(),MPlayerSetup.OsdPos,clrTransparent);
 #endif
+#if VDRVERSNUM >= 10500
+      visible = true;
+      SetNeedsFastResponse(visible);
+      modeOnly=false;
+#else
       needsFastResponse=visible=true; modeOnly=false;
+#endif
       lastCurrent=lastTotal=-1;
       flush=true;
       }
diff -ruN mp3ng-0.0.10_alpha/player-mp3.c mp3ng-0.0.10_zulu/player-mp3.c
--- mp3ng-0.0.10_alpha/player-mp3.c	2006-08-31 23:59:42.000000000 +0200
+++ mp3ng-0.0.10_zulu/player-mp3.c	2007-03-21 14:28:04.000000000 +0100
@@ -1513,6 +1513,22 @@
       outlen+=(sizeof(header)-6);
       buff[4+FHS]=outlen>>8;
       buff[5+FHS]=outlen;
+// Spectrum Analyzer: Hand over the PCM16-data to SpAn
+      int offset = sizeof(header)+FHS;
+      Span_SetPcmData_1_0 SetPcmData;
+      cPlugin *Plugin = cPluginManager::CallFirstService(SPAN_SET_PCM_DATA_ID, NULL);
+      if (Plugin)
+      {
+           SetPcmData.length = (unsigned int)(outlen-offset);
+           // the timestamp (ms) of the frame(s) to be visualized:
+           SetPcmData.index = index;
+           // tell SpAn the ringbuffer's size for it's internal bookkeeping of the data to be visualized:
+           SetPcmData.bufferSize = MP3BUFSIZE;
+           SetPcmData.data = buff + offset + 1; // get rid of the header
+           SetPcmData.bigEndian = true;
+           cPluginManager::CallFirstService(SPAN_SET_PCM_DATA_ID, &SetPcmData);
+      }                                                                                                                   
+      
       f=new cFrame(buff,-(outlen+6+FHS),ftUnknown,index);
       }
     if(!f) free(buff);
@@ -1678,8 +1694,26 @@
   fh->samplerate=sr;
   cFrame *f=0;
   unsigned int outlen=scale.ScaleBlock(buff+FHS,sizeof(buff)-FHS,Samples,Data[0],Data[1],MP3Setup.AudioMode?amDitherLE:amRoundLE);
-  if(outlen) 
+  if(outlen)
+  {
+// Spectrum Analyzer: Hand over the PCM16-data to SpAn
+       int offset = FHS;
+       Span_SetPcmData_1_0 SetPcmData;
+       cPlugin *Plugin = cPluginManager::CallFirstService(SPAN_SET_PCM_DATA_ID, NULL);
+       if (Plugin)
+       {
+            SetPcmData.length = (unsigned int)(outlen-offset);
+            // the timestamp (ms) of the frame(s) to be visualized:
+            SetPcmData.index = index;
+            // tell SpAn the ringbuffer's size for it's internal bookkeeping of the data to be visualized:
+            SetPcmData.bufferSize = MP3BUFSIZE;
+            SetPcmData.data = buff + offset + 1; // get rid of the header
+            SetPcmData.bigEndian = false;
+            cPluginManager::CallFirstService(SPAN_SET_PCM_DATA_ID, &SetPcmData);
+       }
+
     f=new cFrame(buff,outlen+FHS,ftUnknown,index);
+  }
   return f;
 }
 
@@ -1804,6 +1838,7 @@
 #ifdef DEBUG_DELAY
   int lastwrite=0;
 #endif
+  bool frameIncomplete = true;
 
   dsyslog("mp3: player thread started (pid=%d)", getpid());
   state=msStop;
@@ -1857,66 +1892,26 @@
       }
 #endif
       int w=output->Output(p,pc,SOF);
- 
-// Spectrum Analyzer: Push data to analyze
-// Since I needed some time to figure it out:
-// As reminder: "pc" is the counter for the bytes that have been written to p (unsigned char)
-//				However, PCM data seems to consist of ([signed|unsigned]int).
-//				That's why the length that's communicated to the span-plugin has to be smaller,
-//				i.e pc/sizeof/(signed int) = pc/4.
-// The PCM-data is stored interleaved: e.g. 16-bit stereo means, that there are:
-//
-// |--;--|--;--|--;--|--;--|	(|=border of int, - = 1 byte, ; = border of channels)
-//  LL RR LL RR LL RR LL RR		LL/RR = two byte for the left/right channel
- 
-      if (MP3Setup.EnableSpectrumAnalyzer) {
-	Span_SetPcmData_1_0 SetPcmData;
-	cPlugin *Plugin = cPluginManager::CallFirstService(SPAN_SET_PCM_DATA_ID, NULL);
-	int z;
-        //TODO: fix this section
-        int offset = FHS+1; // empirically found out
-	SetPcmData.length = (int)pc-offset;
-	if (SetPcmData.length > PCM_FRAME_SIZE)
-	  SetPcmData.length = (int)PCM_FRAME_SIZE;
-	else if (SetPcmData.length < 0)
-	  SetPcmData.length = 0;
-	if (SetPcmData.length > 10) {
-	  int *data = new int[SetPcmData.length];
-	  SetPcmData.data = data;
- 			
-	  // nasty trick to get the 16-bit data (interleaved in 32-bit (int))
-	  int *p_castedL = new int[SetPcmData.length];
-	  int *p_castedR = new int[SetPcmData.length];
- 			
-	  memcpy(p_castedL,p+offset,(SetPcmData.length-offset)*sizeof(unsigned char));
-	  memcpy(p_castedR,p+offset+2,(SetPcmData.length-offset-2)*sizeof(unsigned char));
-	  SetPcmData.length = SetPcmData.length/sizeof(int);
-	  if (Plugin) {
-          ////	offset = 4;
-          //	for (z = 0; z < SetPcmData.length/2; z+=4) {
-          //	  SetPcmData.data[z/4] = ((p[z+offset])<<8)|((p[z+offset+1]));
-          //	  SetPcmData.data[SetPcmData.length/8 + z/4] = ((p[z+offset+2])<<8)|((p[z+offset+3]));
-          //	}
-            for (z = 0; z < SetPcmData.length/2; z++) {
-	      SetPcmData.data[z] = (int)(p_castedL[z]>>16);
-	      }
-	    for (z = SetPcmData.length/2; z < SetPcmData.length; z++) {
-	      SetPcmData.data[z] = (int)(p_castedR[z]>>16);
-	      }
-            //SetPcmData.length = SetPcmData.length/sizeof(signed int);
-	    cPluginManager::CallFirstService(SPAN_SET_PCM_DATA_ID, &SetPcmData);
-	  }
-	  delete data;
-	  delete p_castedL;
-	  delete p_castedR;
-	}
-      }
- 				   
+
       if(w>0) {
+// Spectrum Analyzer: Tell SpAn which timestamp is currently playing
+          if ( frameIncomplete )
+          {
+              Span_SetPlayindex_1_0 SetPlayindexData;
+              cPlugin *Plugin = cPluginManager::CallFirstService(SPAN_SET_PLAYINDEX_ID, NULL);
+              if (Plugin)
+              {
+                  SetPlayindexData.index = playindex;
+                  cPluginManager::CallFirstService(SPAN_SET_PLAYINDEX_ID, &SetPlayindexData);
+              }
+              frameIncomplete = false;
+          }
+
         p+=w; pc-=w;
         if(pc<=0) {
           ringBuffer->Drop(pframe);
           pframe=0;
+          frameIncomplete = true;
           goto next;
           }
         }
diff -ruN mp3ng-0.0.10_alpha/player-mp3.h mp3ng-0.0.10_zulu/player-mp3.h
--- mp3ng-0.0.10_alpha/player-mp3.h	2006-08-30 22:09:21.000000000 +0200
+++ mp3ng-0.0.10_zulu/player-mp3.h	2007-03-21 14:30:46.000000000 +0100
@@ -26,37 +26,56 @@
 #include <vdr/player.h>
 
 #include <mad.h>
-#include <fftw3.h>
 
 /*
  * Macros.
  */ 
 #define PCM_FRAME_SIZE 2048
 
-#define SPAN_SET_PCM_DATA_ID "Span-SetPcmData-v1.0"
+#define SPAN_PROVIDER_CHECK_ID  "Span-ProviderCheck-v1.0"
+#define SPAN_CLIENT_CHECK_ID    "Span-ClientCheck-v1.0"
+#define SPAN_SET_PCM_DATA_ID    "Span-SetPcmData-v1.1"
+#define SPAN_SET_PLAYINDEX_ID   "Span-SetPlayindex-v1.0"
 #define SPAN_GET_BAR_HEIGHTS_ID "Span-GetBarHeights-v1.0"
+
+//Span requests to collect possible providers / clients
+struct Span_Provider_Check_1_0 {
+    bool *isActive;
+    bool *isRunning;
+};
+
+struct Span_Client_Check_1_0 {
+    bool *isActive;
+    bool *isRunning;
+};
+
 // SpanData
 struct Span_SetPcmData_1_0 {
-	int length; // the length of the PCM-data
-	int *data;	// the PCM-Data as 32-bit int, however only the lower 16-bit are used
-				// and you have to take care to hand in such data!
+	unsigned int length;            // the length of the PCM-data
+	const unsigned char *data;      // the PCM-Data
+	int index;                      // the timestamp (ms) of the frame(s) to be visualized
+	unsigned int bufferSize;        // for span-internal bookkeeping of the data to be visualized
+	bool bigEndian;                 // are the pcm16-data coded bigEndian?
 };
 
+struct Span_SetPlayindex_1_0 {
+	int index;                      // the timestamp (ms) of the frame(s) being currently played
+};
+
 struct Span_GetBarHeights_v1_0 {
-	int bands;						// number of bands to compute
-	int *barHeights;				// the heights of the bars of the two channels combined
-	int *barHeightsLeftChannel;		// the heights of the bars of the left channel
-	int *barHeightsRightChannel;	// the heights of the bars of the right channel
-	int *volumeLeftChannel;			// the volume of the left channels
-	int *volumeRightChannel;		// the volume of the right channels
-	int *volumeBothChannels;		// the combined volume of the two channels
-	const char *name;				// name of the plugin that wants to get the data
-									// (must be unique for each client!)
-	int falloff;                    // bar falloff value
-	// barPeaks[peak-value]
-	// it is planned to support peaks falling as if they were subject to gravity
-	// NOT supported yet!
-	int *barPeaks;
+	unsigned int bands;                     // number of bands to compute
+	unsigned int *barHeights;               // the heights of the bars of the two channels combined
+	unsigned int *barHeightsLeftChannel;    // the heights of the bars of the left channel
+	unsigned int *barHeightsRightChannel;   // the heights of the bars of the right channel
+	unsigned int *volumeLeftChannel;        // the volume of the left channels
+	unsigned int *volumeRightChannel;       // the volume of the right channels
+	unsigned int *volumeBothChannels;       // the combined volume of the two channels
+	const char *name;                       // name of the plugin that wants to get the data
+                                                // (must be unique for each client!)
+	unsigned int falloff;                   // bar falloff value
+	unsigned int *barPeaksBothChannels;     //bar peaks of the two channels combined
+	unsigned int *barPeaksLeftChannel;      // bar peaks of the left channel
+	unsigned int *barPeaksRightChannel;     // bar peaks of the right channel
 };
 
 // -------------------------------------------------------------------
diff -ruN mp3ng-0.0.10_alpha/player-mplayer.c mp3ng-0.0.10_zulu/player-mplayer.c
--- mp3ng-0.0.10_alpha/player-mplayer.c	2006-01-17 22:25:34.000000000 +0100
+++ mp3ng-0.0.10_zulu/player-mplayer.c	2007-03-21 14:40:01.000000000 +0100
@@ -77,7 +77,15 @@
   Lock();
   if(Absolute && Volume==0) mute=true;
   else {
-    volume=Volume;
+#if APIVERSNUM>=10401
+#if APIVERSNUM==10401
+#warning Caution! This code does not work with VDR 1.4.1 and 1.4.1-1. You can ignore this warning if you are using VDR 1.4.1-2 or later.
+#endif
+    if(!Absolute)
+      volume+=Volume;
+    else
+#endif
+      volume=Volume;
     if(volume>0) mute=false;
     }
   d(printf("status: volume=%d mute=%d\n",volume,mute))
